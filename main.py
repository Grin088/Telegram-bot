# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import json
import time
import telebot
from telebot import types
import re
import datetime


# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã
from step_control import StepControl  # –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Ç–∞
from user_data import DataGather  # –∫–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from hotel_API import HotelRequest  # –∫–ª–∞—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∏—Å–∫–µ


step_control = StepControl()  # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Ç–∞
user_data = DataGather()  # –∫–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –≤–≤–æ–¥–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
hotel_data = HotelRequest()  # –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ API —Å —Å–µ—Ä–≤–µ—Ä–∞

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å –¢–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è API —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot('6104491116:AAGUUOG1pVKtmOU-7djFeEFZp6XfL7839EI')


@bot.message_handler(commands=['start', 'main', 'üîôMainMenu'])
def start_message(message: json) -> None:

    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —á–∞—Ç–∞"""

    step_control.reset_param()  # –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    user_data.reset_param()  # –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    btn_find = types.KeyboardButton(text='üîéFind Hotel')  # –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞
    btn_question = types.KeyboardButton(text='/‚ùìHelp')  # –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
    btn_history = types.KeyboardButton(text='/History')  # –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
    markup.add(btn_find, btn_question, btn_history)
    answer = 'You are in Main menu'
    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞
    if message.text == '/start':
        answer = f"üëã Hello {message.from_user.first_name}" \
                 f" I'm test bot.\nI can help you to find a Hotel of your desire!" \
                 "\nPush [üîéFind Hotel] or type /find to start searching.\n You can see all commands" \
                 " to get pushing button ‚ùìHelp or enter /help "

    bot.send_message(message.chat.id, text=answer, reply_markup=markup)
    user_data.user_id = message.from_user.id  # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∑–Ω–∞—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@bot.message_handler(commands=['‚ùìHelp', 'help'])
def help_info(message: json) -> None:

    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     –æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    # —Ç–µ–∫—Å—Ç –≤—ã–≤–æ–¥–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    answer = 'Waiting answer from bot after entering information!\n'\
             'Operation code:\n' \
             '/find: start to searching hotel' \
             '/lowprice: Show result for lower price hotels.\n' \
             '/highprice: Show result for high price hotels.\n' \
             '/bestdeal: Show result for hotels with good price and good location.\n' \
             '/history: show your searching history \n' \
             '/main: return to main menu\n' \


    bot.send_message(message.from_user.id, answer)


@bot.message_handler(commands=['history', 'History'])
def show_history(message: json) -> None:

    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞"""

    user_data.user_id = message.from_user.id  # –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∏—Å–∫–µ, –µ—Å–ª–∏ ID –µ—Å—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
    for i_elem in user_data.get_history():
        # –¥–µ–ª–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if str(message.from_user.id) in i_elem.split():
            bot.send_message(message.from_user.id, text=i_elem)
        # –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
        elif not i_elem:
            bot.send_message(message.from_user.id, text='No result')

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_return = types.KeyboardButton(text='/üîôMain menu')  # –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup.add(btn_return)


# –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ —á–∞—Ç–∞
@bot.message_handler(content_types=['text'])
def menu(message: json) -> None:

    """–§—É–Ω–∫—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞, —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º,
     –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ """

    # —à–∞–≥ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –ø–æ–∏—Å–∫–∞
    if message.text in ['üîéFind Hotel', '/find']:

        # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –ø–æ–∏—Å–∫–∞
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_low_price = types.KeyboardButton(text='üè®Low Price')
        btn_high_price = types.KeyboardButton(text='üèØHigh Price')
        btn_best_deal = types.KeyboardButton(text='üè©Best Deal')
        btn_return = types.KeyboardButton(text='/üîôMainMenu')
        markup.add(btn_low_price, btn_best_deal, btn_high_price, btn_return)
        bot.send_message(message.from_user.id, 'Choose method to find', reply_markup=markup)
        # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –≤—ã–±–æ—Ä–∞ –±—É–∫–≤—ã —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã.
        step_control.method = True
        step_control.counter = 0  # —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏—à–∞–º–∏ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞

    elif message.text in ['üèØHigh Price', 'üè®Low Price', 'üè©Best Deal',
                          '/lowprice', '/bestdeal', '/highprice'] and step_control.method:

        if message.text in ['üè©Best Deal', '/bestdeal']:
            user_data.best_deal = True  # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞

        elif message.text in ['üè®Low Price', '/lowprice']:
            user_data.low_price = True  # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞

        elif message.text in ['üèØHigh Price' or '/highprice']:
            user_data.high_price = True  # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞

        # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é —Å –∞–ª—Ñ–∞–≤–∏—Ç–æ–º, –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –±—É–∫–≤—ã —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
        alphabet(message)  # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–ª—Ñ–∞–≤–∏—Ç–∞, –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã

        # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –∏ –≤—ã–±–æ—Ä–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
        step_control.method = False
        step_control.start = True

    # —à–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –±—É–∫–≤—ã –∏ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    elif step_control.start and message.text not in ['Next', 'Back']:

        if re.match(r'^[A-Z]$', message.text):  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            with open('all_countries.json', 'r') as country_list:
                data = json.load(country_list)  # –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º
                # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç—Ä–∞–Ω
                result = [country for country in data.keys() if re.match(f'^{message.text}.*', country)]
                markup = types.ReplyKeyboardMarkup()
                # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ —Å—Ç—Ä–∞–Ω
                buttons = [types.KeyboardButton(text=country) for country in result]
                buttons.append(types.KeyboardButton(text='/üîôMainMenu'))
                markup.add(*buttons)
                bot.send_message(message.from_user.id, text='Choose a country', reply_markup=markup)
                # –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –∏ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
                step_control.start = False
                step_control.country = True
        else:
            # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –±—É–∫–≤–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–≤–æ–¥
            bot.send_message(message.from_user.id, text='Enter first letter, e.g "I"')

    # —à–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ —Å—Ç–∞—Ä–Ω—ã –∏ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    elif step_control.country:

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã –≤–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º —Å—Ç—Ä–∞–Ω—ã —Å–æ–¥–µ—Ä–∂–∞–ª–æ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã
        if re.match(r'^[a-zA-Z\s]+$', message.text):

            hotel_data.country = message.text   # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ ID –≥–æ—Ä–æ–¥–∞
            # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–æ–≤
            with open('all_countries.json', 'r') as country_list:

                data = json.load(country_list)
                # –µ—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ —Å—Ç—Ä–∞–Ω –µ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥–æ—Ä–æ–¥–æ–≤
                if data.get(message.text):
                    # —Å–æ–∑–¥–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
                    result = [city for city in sorted(data.get(message.text))]
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥–æ—Ä–æ–¥–æ–≤
                    buttons = [types.KeyboardButton(text=city) for city in result]
                    buttons.append(types.KeyboardButton(text='/üîôMainMenu'))
                    markup.add(*buttons)
                    bot.send_message(message.from_user.id, 'Choose a city', reply_markup=markup)
                    user_data.country = message.text
                    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –ø–æ–ª—É—á–µ–Ω–∏—è ID –≥–æ—Ä–æ–¥–∞ –∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
                    step_control.country = False
                    step_control.city = True

                else:
                    # –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é
                    answer = 'This country not found, choose other country'
                    bot.send_message(message.from_user.id, answer)
        else:
            answer = 'Enter name of country without digits or symbols, for e.g "Republic of Kosovo"'
            bot.send_message(message.from_user.id, answer)

    # —à–∞–≥ –ø–æ–ª—É—á–µ–Ω–∏—è ID –≥–æ—Ä–æ–¥–∞ –∏ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç –æ—Ç–µ–ª–µ–π
    elif step_control.city:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ ID –≥–æ—Ä–æ–¥–∞
        result = hotel_data.country_id_request(message.text)
        print(hotel_data.get_city_id())

        if result:
            # –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID –≥–æ—Ä–æ–¥–∞
            if result != 'Not result':
                # –µ—Å–ª–∏ ID –ø–æ–ª—É—á–µ–Ω –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
                user_data.city = message.text
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                btn_return = types.KeyboardButton(text='/üîôMainMenu')
                markup.add(btn_return)
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
                answer = 'Enter quantity of hotels,  not more than 5'
                bot.send_message(message.from_user.id, text=answer, reply_markup=markup)
                # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π
                step_control.hotel_quantity = True
                step_control.city = False

            else:
                # –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                answer = 'Sorry! We have no any result for this city, try to change parameters for search'
                bot.send_message(message.from_user.id, text=answer)

        else:

            bot.send_message(message.from_user.id, 'No internet connection, try again')

    # —à–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π –∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –≤ –æ—Ç–µ–ª—å
    elif step_control.hotel_quantity:

        if re.match(r"^\d+$", message.text):
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π, –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –±–æ–ª—å—à–µ 5 –æ—Ç–µ–ª–µ–π
            if int(message.text) <= 5:
                user_data.hotel_quantity = message.text  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                btn_return = types.KeyboardButton(text='/üîôMainMenu')
                markup.add(btn_return)
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –¥–∞—Ç—ã
                answer = 'Enter data for check_in in format DD MM YYYY'
                bot.send_message(message.chat.id, text=answer, reply_markup=markup)
                # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã –∏ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã Check out
                step_control.hotel_quantity = False
                step_control.check_in_date = True
            else:
                answer = 'Enter quantity not more than 5'
                bot.send_message(message.chat.id, text=answer)
        else:
            bot.send_message(message.from_user.id, 'Enter only digits!')
    # —à–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã Check in –∏ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã Check out
    elif step_control.check_in_date:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã Checkin
        if is_valid_date(message.text):
            # –ø—Ä–æ–≤–µ—Ä–∫–∞: –≤–≤–µ–¥–µ–Ω–Ω–∞—è Check in –¥–∞—Ç–∞ > –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è
            date_now = time.strptime(str(datetime.date.today()), '%Y-%m-%d')
            check_in_date = time.strptime(message.text, '%d %m %Y')

            if date_now < check_in_date:
                user_data.check_in_date = message.text
                hotel_data.check_in = message.text
                answer = 'Enter data for check_out in format DD MM YYYY'
                bot.send_message(message.from_user.id, text=answer)
                # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –ø—Ä–æ–≤–µ—Ä–∫–∏ Check out –¥–∞—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥—É –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –ª–∏–±–æ –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                step_control.check_in_date = False
                step_control.check_out_date = True
            else:
                answer = f'Date for check in not be early then date now {datetime.date.today()}'
                bot.send_message(message.chat.id, text=answer)

        else:
            bot.send_message(message.chat.id, text='Enter correct format of data DD MM YYYY')
    # —à–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ Check out –¥–∞—Ç—ã –∏ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏–ª–∏ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
    elif step_control.check_out_date:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã
        if is_valid_date(message.text):

            hotel_data.check_out = message.text
            check_in = time.strptime(hotel_data.check_in, '%d %m %Y')
            check_out = time.strptime(message.text, '%d %m %Y')
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ Check in < Check out
            if check_in < check_out:

                user_data.check_out_date = message.text
                step_control.check_out_date = False
                # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
                if user_data.best_deal:
                    print(user_data.best_deal)
                    answer = 'Enter desire distance from centre in format: e.g 0-1, in km'
                    bot.send_message(message.chat.id, text=answer)
                    step_control.distance = True
                #  –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∏ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
                else:
                    answer = 'Enter min price in $'
                    bot.send_message(message.chat.id, text=answer)
                    step_control.min_price = True
            else:
                bot.send_message(message.chat.id, text='Check out date must be later than check in date')
        else:
            bot.send_message(message.chat.id, text='Enter correct format of data e.g 20 12 2023')
    # —à–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
    elif step_control.distance:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
        if re.match(r"^\d+-\d+$", message.text):

            check_value = message.text.split('-')
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∏ –≤—Ç–æ—Ä–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
            if int(check_value[0]) < int(check_value[1]):
                answer = 'Enter min price in $'
                hotel_data.distance = message.text.split('-')
                bot.send_message(message.chat.id, text=answer)
                # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∏ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
                step_control.distance = False
                step_control.min_price = True
            else:
                answer = "First number must be less then second "
                bot.send_message(message.chat.id, text=answer)

        else:
            answer = "Enter correct distance, e.g '0 1'"
            bot.send_message(message.chat.id, text=answer)

    # —à–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∏ –≤–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
    elif step_control.min_price:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        if re.match(r"^\d+$", message.text):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn_return = types.KeyboardButton(text='/üîôMainMenu')
            markup.add(btn_return)
            bot.send_message(message.from_user.id, 'Enter max price in $', reply_markup=markup)
            # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∏ –≤–≤–æ–¥–∞ —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç–µ–ª—è
            step_control.min_price = False
            step_control.max_price = True
            user_data.min_price = message.text  # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞

        else:
            bot.send_message(message.from_user.id, 'Enter only digits!')

    # —à–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∏ –≤–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –æ—Ç–µ–ª—è
    elif step_control.max_price:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞
        if re.match(r"^\d+$", message.text):
            # –ø—Ä–æ–≤–µ—Ä–∫–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ < —á–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è
            if int(message.text) > int(user_data.min_price):
                # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                bth_1 = types.KeyboardButton(text='Yes')
                bth_2 = types.KeyboardButton(text='No')
                btn_return = types.KeyboardButton(text='/üîôMainMenu')
                markup.add(bth_1, bth_2, btn_return)
                answer = 'Do you want to get photo of your hotel?. Enter "Yes" or "No"'
                bot.send_message(message.from_user.id, text=answer, reply_markup=markup)
                # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª–∏–±–æ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                step_control.max_price = False
                step_control.photos = True
                user_data.max_price = message.text  # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞

            else:

                answer = f'Enter number more than {user_data.min_price}'
                bot.send_message(message.from_user.id, text=answer)

        else:
            bot.send_message(message.from_user.id, 'Enter only digits!')

    # —à–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
    elif step_control.photos:

        if message.text in ['Yes', 'No']:

            if message.text == 'Yes':
                hotel_data.photo = True  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                btn_return = types.KeyboardButton(text='/üîôMainMenu')
                markup.add(btn_return)
                answer = 'Enter quantity of photos, not more than 5'
                bot.send_message(message.from_user.id, text=answer, reply_markup=markup)
                user_data.photos = True  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                step_control.photos = False
                step_control.photos_quantity = True

            elif message.text == 'No':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                result = types.KeyboardButton(text='Show result')
                btn_return = types.KeyboardButton(text='/üîôMainMenu')
                markup.add(result, btn_return)
                answer = "To get result. Send message: 'show result' or push button"
                bot.send_message(message.from_user.id, text=answer, reply_markup=markup)
                # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                user_data.photos = False
                step_control.photos = False
                step_control.finish = True

            else:
                bot.send_message(message.chat.id, text='enter correct answer')
    # —à–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    elif step_control.photos_quantity:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ —Ü–∏—Ñ—Ä
        if re.match(r"^\d+$", message.text):
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ñ–æ—Ç–æ
            if int(message.text) <= 5:
                user_data.photos_quantity = message.text  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                result = types.KeyboardButton(text='Show result')
                btn_return = types.KeyboardButton(text='/üîôMainMenu')
                markup.add(result, btn_return)
                answer = 'To get result , send: show result or push button'
                bot.send_message(message.from_user.id, text=answer, reply_markup=markup)
                # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                step_control.photos_quantity = False
                step_control.finish = True
            else:
                bot.send_message(message.from_user.id, text='Enter number less or equal 5')

        else:

            bot.send_message(message.from_user.id, text='Enter only digits')

    elif step_control.finish:

        if message.text == 'Show result':
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä HOTELS –∏—Å–ø–æ–ª—å–∑—É—è API
            hotels_request = hotel_data.find_hotels(min_price=user_data.min_price, max_price=user_data.max_price,
                                                    high_price=user_data.best_deal, quantity=user_data.hotel_quantity)
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            if hotels_request:
                # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
                hotel_data.get_hotel_information(low_price=user_data.low_price, high_price=user_data.low_price,
                                                 best_deal=user_data.best_deal)
                if hotel_data:
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç–µ–ª—è, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç "show photo"
                    if user_data.photos:
                        hotel_data.get_hotel_photo(user_data.photos_quantity)

                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    btn_return = types.KeyboardButton(text='/üîôMainMenu')
                    markup.add(btn_return)
                    # –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    for i_message in hotel_data.hotel_information_message():
                        bot.send_message(message.chat.id, text=i_message)
                    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
                    user_data.save_search_history([str(y) for x in hotel_data.result for y in x.split('\n')])
                    bot.send_message(message.chat.id, text='/start')
                    step_control.finish = False
                else:
                    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
                    user_data.save_search_history(result='No result')
                    answer = 'No result for your request, try to change searching parameters'
                    bot.send_message(message.chat.id, text=answer)
            else:

                bot.send_message(message.chat.id, text='Sorry, No internet connection!')
        else:
            bot.send_message(message.chat.id, text='Enter "Show result or push button')
    # —à–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª—Ñ–∞–≤–∏—Ç–æ–º
    elif message.text == 'Next' and step_control.start:

        step_control.counter += 1
        alphabet(message)
    # —à–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª—Ñ–∞–≤–∏—Ç–æ–º
    elif message.text == 'Back' and step_control.start:

        step_control.counter -= 1
        alphabet(message)


def alphabet(message: json) -> None:

    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–ª—Ñ–∞–≤–∏—Ç–∞ —Å 3 –º—è
    –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    """

    alphabet_list = [chr(x) for x in range(ord('A'), ord('Z') + 1)]
    letters = alphabet_list[:9] if step_control.counter == 0 \
        else(alphabet_list[9:18] if step_control.counter == 1 else alphabet_list[18:26])

    print(step_control.counter)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton(text=letter) for letter in letters]
    buttons.append(types.KeyboardButton(text='/üîôMainMenu'))

    if step_control.counter == 0:

        buttons.append(types.KeyboardButton(text='Next'))

    elif step_control.counter == 1:

        buttons.append(types.KeyboardButton(text='Back'))
        buttons.append(types.KeyboardButton(text='Next'))

    elif step_control.counter == 2:

        buttons.append(types.KeyboardButton(text='Back'))

    markup.add(*buttons)
    bot.send_message(message.from_user.id, 'Choose a start letter of country name', reply_markup=markup)


def is_valid_date(date_text: str) -> bool:

    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã
    """

    try:
        datetime.datetime.strptime(date_text, '%d %m %Y')
        return True

    except ValueError:
        return False


bot.polling(none_stop=True)
